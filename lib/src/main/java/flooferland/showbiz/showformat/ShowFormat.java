/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package flooferland.showbiz.showformat;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.zip.GZIPInputStream;

// TODO: Make an API for reading/parsing the show intermediate files from an InputStream

// TODO: Add more error handling: Check if the version of the file matches (and exists), etc

public class ShowFormat {
    public final @Nonnull ShowBlock signal;
    public final @Nonnull ShowBlock audio;
    public final @Nullable ShowBlock video;

    private ShowFormat(@Nonnull ShowBlock signal, @Nonnull ShowBlock audio, @Nullable ShowBlock video) {
        this.signal = signal;
        this.audio = audio;
        this.video = video;
    }
    
    /** Parses the binary intermediate format and returns a new ShowFormat */
    public static @Nullable ShowFormat fromIntermediate(InputStream inputStream) throws Exception {
        // Uncompressed and reading the data
        var stream = new GZIPInputStream(inputStream);
        
        // File format header
        String formatHeader = new String(stream.readNBytes(8), StandardCharsets.UTF_8);
        if (!formatHeader.equals("SHOWBIN\0")) {
            System.err.println(String.format("ERROR: File header \"%s\" doesn't match the format!", formatHeader));
            return null;
        }
        
        // File metadata
        short version = ByteBuffer.wrap(stream.readNBytes(2)).getShort();
        System.out.printf("Read version '%s' of the format.%n", version);
        stream.skipNBytes(6);
        
        // Parsing
        @Nonnull ShowBlock signal = null;
        @Nonnull ShowBlock audio = null;
        @Nullable ShowBlock video = null;
        for (int i = 0; i < 2; i++) {
            // First block header
            byte[] header = stream.readNBytes(DataConverter.identBase.length);
            if (!Arrays.equals(header, DataConverter.identBase)) {
                System.err.println(String.format("ERROR: Block header \"%s\" doesn't match the format.\nThe length specified in the header of the last section might've been wrong.", new String(header, StandardCharsets.UTF_8)));
                return null;
            }

            // First block id
            int blockIdBytes = (int) stream.read();
            Ident blockId = Ident.fromHex(blockIdBytes);
            if (blockId == null) {
                System.err.println(String.format(
                        "Block ID doesn't match any known ID: %s\nExamples:\n- Signal section ID: %s\n- Audio section ID: %s\n- Video section ID: %s",
                        Util.toHexString(blockIdBytes),
                        Util.toHexString(Ident.signalByte),
                        Util.toHexString(Ident.audioByte),
                        Util.toHexString(Ident.videoByte)
                ));
                return null;
            }

            // Block length
            byte[] blockLengthBytes = stream.readNBytes(4);
            int blockLength = ByteBuffer.wrap(blockLengthBytes).getInt();
            stream.skipNBytes(4);
            
            System.out.printf("%s | %s%n", Util.hexArrayToString(blockLengthBytes), Util.hexArrayToChars(blockLengthBytes));

            // Reading the data
            byte[] data = null;
            if (stream.available() == 1) {
                data = stream.readNBytes(blockLength);
                if (data == null) {
                    System.err.println("ERROR: Data is null");
                    return null;
                }
                if (stream.available() == 1) {
                    stream.skipNBytes(1);
                }
            }
            
            // Adding the block
            switch (blockId) {
                case Signal:
                    signal = new ShowBlock(blockId, data);
                    break;
                case Audio:
                    audio = new ShowBlock(blockId, data);
                    break;
                case Video:
                    if (data != null) {
                        video = new ShowBlock(blockId, data);
                    } else {
                        video = null;
                    }
                    break;
            }
            System.out.printf("Finished reading BlockID '%s'%n%n", blockId);
        }
        
        // Returning
        if (signal == null || audio == null) {
            System.err.println("Signal/audio data is null for an unknown reason");
            return null;
        }
        return new ShowFormat(signal, audio, video);
    }
}
